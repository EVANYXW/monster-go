// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.23.4
// source: common.proto

package xsf_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 全局定义
type GlobalDefine int32

const (
	GlobalDefine_GD_None            GlobalDefine = 0
	GlobalDefine_LevelStar_1        GlobalDefine = 1
	GlobalDefine_LevelStar_2        GlobalDefine = 2
	GlobalDefine_MaxLevelStar       GlobalDefine = 3 // 关卡最大星
	GlobalDefine_MaxTeamMember      GlobalDefine = 7 // 队伍最大角色数
	GlobalDefine_MaxTeamNameLength  GlobalDefine = 24
	GlobalDefine_MaxTeamPlayerSkill GlobalDefine = 3
)

// Enum value maps for GlobalDefine.
var (
	GlobalDefine_name = map[int32]string{
		0:  "GD_None",
		1:  "LevelStar_1",
		2:  "LevelStar_2",
		3:  "MaxLevelStar",
		7:  "MaxTeamMember",
		24: "MaxTeamNameLength",
		// Duplicate value: 3: "MaxTeamPlayerSkill",
	}
	GlobalDefine_value = map[string]int32{
		"GD_None":            0,
		"LevelStar_1":        1,
		"LevelStar_2":        2,
		"MaxLevelStar":       3,
		"MaxTeamMember":      7,
		"MaxTeamNameLength":  24,
		"MaxTeamPlayerSkill": 3,
	}
)

func (x GlobalDefine) Enum() *GlobalDefine {
	p := new(GlobalDefine)
	*p = x
	return p
}

func (x GlobalDefine) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GlobalDefine) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[0].Descriptor()
}

func (GlobalDefine) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[0]
}

func (x GlobalDefine) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GlobalDefine.Descriptor instead.
func (GlobalDefine) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

type DisconnectReason int32

const (
	DisconnectReason_DR_None       DisconnectReason = 0
	DisconnectReason_Full          DisconnectReason = 1 // 服务器已满
	DisconnectReason_HTTimeout     DisconnectReason = 2 // 心跳超时
	DisconnectReason_ServerDown    DisconnectReason = 3 // 服务器关闭
	DisconnectReason_MsgInvalid    DisconnectReason = 4 // 消息非法
	DisconnectReason_LoginError    DisconnectReason = 5 // 登录错误
	DisconnectReason_DRClientLogin DisconnectReason = 6 // 有其他玩家登录
	DisconnectReason_AuthError     DisconnectReason = 7 // 非法用户
)

// Enum value maps for DisconnectReason.
var (
	DisconnectReason_name = map[int32]string{
		0: "DR_None",
		1: "Full",
		2: "HTTimeout",
		3: "ServerDown",
		4: "MsgInvalid",
		5: "LoginError",
		6: "DRClientLogin",
		7: "AuthError",
	}
	DisconnectReason_value = map[string]int32{
		"DR_None":       0,
		"Full":          1,
		"HTTimeout":     2,
		"ServerDown":    3,
		"MsgInvalid":    4,
		"LoginError":    5,
		"DRClientLogin": 6,
		"AuthError":     7,
	}
)

func (x DisconnectReason) Enum() *DisconnectReason {
	p := new(DisconnectReason)
	*p = x
	return p
}

func (x DisconnectReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DisconnectReason) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[1].Descriptor()
}

func (DisconnectReason) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[1]
}

func (x DisconnectReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DisconnectReason.Descriptor instead.
func (DisconnectReason) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

type LoginResult int32

const (
	LoginResult_Success            LoginResult = 0 // 登录成功
	LoginResult_SystemError        LoginResult = 1 // 系统错误
	LoginResult_RedisError         LoginResult = 2
	LoginResult_LROtherLogin       LoginResult = 3 // 有其他玩家登录
	LoginResult_DBError            LoginResult = 4
	LoginResult_ActorIDError       LoginResult = 5  // 角色ID非法
	LoginResult_LoginKeyError      LoginResult = 6  // LoginKey非法
	LoginResult_LoginLock          LoginResult = 7  // 登录限制
	LoginResult_LROtherLoginGame   LoginResult = 8  // 有其他玩家登录,登录已无效
	LoginResult_StatusError        LoginResult = 9  // 状态错误
	LoginResult_LoginAuthError     LoginResult = 10 // 登录信息验证错误，账号密码错误，或者token错误
	LoginResult_LoginParamError    LoginResult = 11 // 登录参数错误
	LoginResult_ReloginTimeout     LoginResult = 12 // 重连超时了
	LoginResult_ReloginKeyInvalid  LoginResult = 13 // 重连key不正确
	LoginResult_ReloginStatusError LoginResult = 14 // 当前状态不允许重连
	LoginResult_AccountInvalid     LoginResult = 15 // 账号含有非法字符
)

// Enum value maps for LoginResult.
var (
	LoginResult_name = map[int32]string{
		0:  "Success",
		1:  "SystemError",
		2:  "RedisError",
		3:  "LROtherLogin",
		4:  "DBError",
		5:  "ActorIDError",
		6:  "LoginKeyError",
		7:  "LoginLock",
		8:  "LROtherLoginGame",
		9:  "StatusError",
		10: "LoginAuthError",
		11: "LoginParamError",
		12: "ReloginTimeout",
		13: "ReloginKeyInvalid",
		14: "ReloginStatusError",
		15: "AccountInvalid",
	}
	LoginResult_value = map[string]int32{
		"Success":            0,
		"SystemError":        1,
		"RedisError":         2,
		"LROtherLogin":       3,
		"DBError":            4,
		"ActorIDError":       5,
		"LoginKeyError":      6,
		"LoginLock":          7,
		"LROtherLoginGame":   8,
		"StatusError":        9,
		"LoginAuthError":     10,
		"LoginParamError":    11,
		"ReloginTimeout":     12,
		"ReloginKeyInvalid":  13,
		"ReloginStatusError": 14,
		"AccountInvalid":     15,
	}
)

func (x LoginResult) Enum() *LoginResult {
	p := new(LoginResult)
	*p = x
	return p
}

func (x LoginResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoginResult) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[2].Descriptor()
}

func (LoginResult) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[2]
}

func (x LoginResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoginResult.Descriptor instead.
func (LoginResult) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

type OpResult int32

const (
	OpResult_Ok                                  OpResult = 0     // 操作成功
	OpResult_TooFast                             OpResult = 1     // 操作太频繁了
	OpResult_Item_CfgError                       OpResult = 10000 // 物品配置错误
	OpResult_Item_CfgTypeError                   OpResult = 10001 // 物品配置类型错误
	OpResult_Item_CfgSystemError                 OpResult = 10002 // 物品系统内部错误
	OpResult_Item_CannotUse                      OpResult = 10003 // 该物品无法使用
	OpResult_Item_NotEnough                      OpResult = 10004 // 物品不足
	OpResult_Item_SelectedNotExist               OpResult = 10005 // 自选宝箱选中的道具不存在
	OpResult_Character_NotExist                  OpResult = 20000 // 角色数据不存在
	OpResult_Character_LevelFull                 OpResult = 20001 // 角色等级已满
	OpResult_Character_BreakCfgError             OpResult = 20002 // 角色突破配置错误，不存在
	OpResult_Character_UpgradeLevelParamError    OpResult = 20003 // 升级参数错误
	OpResult_Character_UpgradeLevelExpNotEnough  OpResult = 20004 // 升级经验点数不够
	OpResult_Character_UpgradeTypeError          OpResult = 20005 // 升级操作类型错误
	OpResult_Character_BreakCfgCountError        OpResult = 20006 // 突破配置消耗配置错误
	OpResult_Character_UpgradeLevelItemNotEnough OpResult = 20007 // 角色提升需要消耗的物品不够
	OpResult_Vehicle_NotExist                    OpResult = 20008 // 载具不存在
	OpResult_Vehicle_UpgradeTypeError            OpResult = 20009 // 载具升级类型错误
	OpResult_Vehicle_UpgradeCfgError             OpResult = 20010 // 载具升级配置不存在，不可以升级
	OpResult_Vehicle_UpgradeFull                 OpResult = 20011 // 载具该属性已升级到满级
	OpResult_Vehicle_UpgradeCostNotEnough        OpResult = 20012 // 升级需要消耗的道具不足
	OpResult_Vehicle_UpgradeParamError           OpResult = 20013 // 升级参数错误
	OpResult_Team_NameIsTooLong                  OpResult = 20113 // 队伍名称太长
	OpResult_Team_CharacterIDError               OpResult = 20114 // 队伍角色ID数量非法
	OpResult_Team_CharacterNotExist              OpResult = 20115 // 队伍中的角色不存在
	OpResult_Team_VehicleNotExist                OpResult = 20116 // 队伍中载具不存在
	OpResult_Team_CreateIndexError               OpResult = 20117 // 队伍编号错误
	OpResult_Team_NotExist                       OpResult = 20118 // 队伍不存在
	OpResult_Team_MemberEmpty                    OpResult = 20119 // 空队伍
	OpResult_Team_PlayerSkillIDError             OpResult = 20120 // 指挥官技能错误，超上限了
	OpResult_Team_PlayerSkillInvalid             OpResult = 20121 // 指挥官技能无效
	OpResult_Unlock_SchemaNotfound               OpResult = 21000 // 解锁条件对应的配置不存在
	OpResult_Unlock_TypeError                    OpResult = 21001 // 解锁类型错误
	OpResult_Unlock_CheckNotHandler              OpResult = 21002 // 解锁条件未实现
	OpResult_Unlock_CharacterNotExist            OpResult = 21003 // 角色未获得
	OpResult_Level_IsRunning                     OpResult = 22000 // 当前正在关卡战斗中
	OpResult_Level_SchemaNotExist                OpResult = 22001 // 关卡配置不存在
	OpResult_Level_ExitInvalid                   OpResult = 22002 // 关卡无法结算，当前服务器没有正在进行的关卡
	OpResult_Level_StarInvalid                   OpResult = 22003 // 关卡星数不满足
	OpResult_Level_ItemNotEnough                 OpResult = 22004 // 进入关卡需要消耗的物品不足
	OpResult_Level_StarIsTooLarge                OpResult = 22005 // 关卡星太大了
	OpResult_Level_ChapterNotExist               OpResult = 22006 // 章节不存在
	OpResult_Level_ChapterRewardIndexError       OpResult = 22007 // 领取宝箱位置错误
	OpResult_Level_ChapterRewardIndexInvalid     OpResult = 22008 // 当前位置不可领取，请先领取前面的宝箱
	OpResult_Level_ChapterRewardStarNotEnough    OpResult = 22009 // 章节宝箱星数不够
	OpResult_Level_NotPassed                     OpResult = 22010 // 关卡未通关
	OpResult_Raffle_GachaNotExist                OpResult = 23000 // gacha配置不存在
	OpResult_Raffle_PoolNotExist                 OpResult = 23001 // 抽卡池不存在
	OpResult_Raffle_PoolNotUnlock                OpResult = 23002 // 抽卡池未解锁
	OpResult_Raffle_CostNotEnough                OpResult = 23003 // 抽卡需要消耗的物品不足
	OpResult_Raffle_SchemaError                  OpResult = 23004 // 抽卡配置错误
	OpResult_Raffle_DrawTypeError                OpResult = 23005 // 不支持该抽奖类型
	OpResult_Raffle_FreeDrawInvalid              OpResult = 23006 // 当前卡包没有免费抽
	OpResult_Raffle_NoMoreFreeCount              OpResult = 23007 // 没有剩余的免费抽次数
	OpResult_Raffle_NoMoreCount                  OpResult = 23008 // 没有剩余的抽取次数
	OpResult_Raffle_TicketNotEnough              OpResult = 23009 // 抽奖券不足
	OpResult_Raffle_ParamError                   OpResult = 23010 // 抽奖参数不正确
	OpResult_Raffle_NoPatioExchange              OpResult = 23011 // 当前gacha没有天井兑换
	OpResult_Raffle_PatioIndexError              OpResult = 23012 // 选择序号错误
	OpResult_Raffle_NotEnoughPatioCoin           OpResult = 23013 // 没有足够的天井币
	OpResult_Mail_WaittingData                   OpResult = 24000 // 邮件数据还为准备好
	OpResult_Mail_NotExist                       OpResult = 24001 // 邮件不存在
	OpResult_Mail_NoItems                        OpResult = 24002 // 邮件没有物品附件
	OpResult_Mail_Cliamed                        OpResult = 24003 // 邮件已领取附件
	OpResult_Mail_CantDeleteNoClaimed            OpResult = 24004 // 不能删除未读邮件
	OpResult_PlayerSkill_NotExist                OpResult = 25000 // 指挥官技能不存在
	OpResult_PlayerSkill_IsFull                  OpResult = 25001 // 指挥官技能已升满
	OpResult_PlayerSkill_LayerNotOpen            OpResult = 25002 // 技能所属的层未解锁
	OpResult_PlayerSkill_LayerCfgError           OpResult = 25003 // 技能层配置错误
	OpResult_PlayerSkill_CostNotEnough           OpResult = 25004 // 升级消耗道具不足
	OpResult_PlayerSkill_ParamError              OpResult = 25005 // 参数错误
	OpResult_NicknameExist                       OpResult = 30000 // 昵称已存在
	OpResult_Task_SchemaNotExist                 OpResult = 30001 // 任务配置不存在
	OpResult_Task_AlreadyClaimed                 OpResult = 30002 // 任务奖励已领取
	OpResult_Task_NotDone                        OpResult = 30003 // 任务未完成
	OpResult_Task_CheckTypeNotExist              OpResult = 30004 // 任务检车类型不正确
	OpResult_Shop_SchemaNotExist                 OpResult = 31000 // 商店配置不存在
	OpResult_Shop_GoodSchemaNotExist             OpResult = 31001 // 商品配置不存在
	OpResult_Shop_NotExist                       OpResult = 31002 // 商店不存在
	OpResult_Shop_ParamError                     OpResult = 31003 // 商店操作参数错误
	OpResult_Shop_PurchaseCountNotEnough         OpResult = 31004 // 购买次数不够
	OpResult_Shop_ItemNotEnough                  OpResult = 31005 // 购买需要消耗的物品不够
	OpResult_Pvp_CharacterNotExist               OpResult = 32000 // 角色不存在
	OpResult_Pvp_VehicleNotExist                 OpResult = 32001 // 载具不存在
	OpResult_Pvp_NeedCharacterOrVehicle          OpResult = 32002 // 至少需要上阵一个角色或载具
	OpResult_Pvp_SystemError                     OpResult = 32003 // 系统错误
	OpResult_Pvp_ActorDataNotExist               OpResult = 32004 // 角色数据不存在
	OpResult_Pvp_TeamDataNotExist                OpResult = 32005 // PVP防守数据不存在
	OpResult_Pvp_TooFast                         OpResult = 32006 // 操作太快
	OpResult_Pvp_NoRivalsData                    OpResult = 32007 // 没有找到对手数据
	OpResult_Pvp_RivalSelected                   OpResult = 32008 // 已选择对手
	OpResult_Pvp_RivalNotExist                   OpResult = 32009 // 对手不存在
	OpResult_Pvp_CostNotEnough                   OpResult = 32010 // pvp消耗的道具不够
	OpResult_Pvp_ResultStatusError               OpResult = 32011 // 当前状态错误，不能结算
	OpResult_Pvp_ResultKeyError                  OpResult = 32012 // pvp结算key错误
	OpResult_Purchase_IOS_SignedStringError      OpResult = 40001 // ios token签名错误
	OpResult_Purchase_HttpError                  OpResult = 40002 // http请求错误
	OpResult_Purchase_Failed                     OpResult = 40003 // 购买失败
	OpResult_Purchase_IOS_JsonError              OpResult = 40004 // apple 返回json错误
	OpResult_Purchase_ActorOffline               OpResult = 40005 // 玩家离线
	OpResult_Purchase_ProductIDError             OpResult = 40006 // 商品ID错误
	OpResult_Purchase_TransactionDuplicate       OpResult = 40007
	OpResult_Purchase_PlatformInvalid            OpResult = 40008  // 平台不支持
	OpResult_Purchase_AppAccountTokenError       OpResult = 40009  // appAccountToken 不一致
	OpResult_Purchase_DebugRun                   OpResult = 40010  // 测试运行
	OpResult_GiftCode_ParamError                 OpResult = 100001 // 输入有误	发起请求的参数错误或者缺失部分必要参数
	OpResult_GiftCode_CodeError                  OpResult = 100004 // 验证码输入错误，请重试	校验图形验证码错误
	OpResult_GiftCode_ParamError2                OpResult = 100005 // 参数错误	提交的 ClientId 或者 ServerCode 错误
	OpResult_GiftCode_CountLimit                 OpResult = 100006 // 兑换码兑换次数已达上限	兑换的兑换码没有库存了
	OpResult_GiftCode_OutOfDate                  OpResult = 100008 // 不在礼包活动时间范围之内	礼包活动已过期
	OpResult_GiftCode_NotOpen                    OpResult = 100009 // 暂未开放	礼包活动暂停兑换
	OpResult_GiftCode_OutOfServer                OpResult = 100010 // 超出服使用范围	提交的 ServerCode 错误，不在礼包设置的范围
	OpResult_GiftCode_TooFast                    OpResult = 100011 // 点击太快了，手速慢点	唯一码连续提交
	OpResult_GiftCode_NotEnough                  OpResult = 100012 // 超出礼包最大兑换次数	通兑码库存不足（并发兑换时可能触发）
	OpResult_GiftCode_AuthError                  OpResult = 100013 // 校验 cdkey 未通过	二次校验游戏方返回了不通过结果
	OpResult_GiftCode_Busy                       OpResult = 100014 // 操作的人太多了，服务器正在拼命处理中（限流中）	兑换系统已达流量极限
	OpResult_GiftCode_SendItemError              OpResult = 100015 // 发送道具失败	发送道具游戏方返回了失败结果
	OpResult_GiftCode_CodeInvalid                OpResult = 100016 // 该礼包码无效	异常兑换码的提交
	OpResult_GiftCode_CountLimit2                OpResult = 100017 // 该用户超出礼包最大兑换次数	相同用户使用礼包中超过礼包设置的兑换数量
	OpResult_GiftCode_ServerError                OpResult = 100018 // 该活动无法使用此兑换接口	礼包无服务器设置错误
	OpResult_GiftCode_ServerError2               OpResult = 100022 // 该区域不支持此兑换码	非此 ClientId 的唯一兑换码
	OpResult_GiftCode_ServerError3               OpResult = 500001 // 服务器故障	礼包系统出现通用性错误
	OpResult_GiftCode_ServerError4               OpResult = 500002 // 外部接口校验错误	与游戏方接口通讯发生了异常
)

// Enum value maps for OpResult.
var (
	OpResult_name = map[int32]string{
		0:      "Ok",
		1:      "TooFast",
		10000:  "Item_CfgError",
		10001:  "Item_CfgTypeError",
		10002:  "Item_CfgSystemError",
		10003:  "Item_CannotUse",
		10004:  "Item_NotEnough",
		10005:  "Item_SelectedNotExist",
		20000:  "Character_NotExist",
		20001:  "Character_LevelFull",
		20002:  "Character_BreakCfgError",
		20003:  "Character_UpgradeLevelParamError",
		20004:  "Character_UpgradeLevelExpNotEnough",
		20005:  "Character_UpgradeTypeError",
		20006:  "Character_BreakCfgCountError",
		20007:  "Character_UpgradeLevelItemNotEnough",
		20008:  "Vehicle_NotExist",
		20009:  "Vehicle_UpgradeTypeError",
		20010:  "Vehicle_UpgradeCfgError",
		20011:  "Vehicle_UpgradeFull",
		20012:  "Vehicle_UpgradeCostNotEnough",
		20013:  "Vehicle_UpgradeParamError",
		20113:  "Team_NameIsTooLong",
		20114:  "Team_CharacterIDError",
		20115:  "Team_CharacterNotExist",
		20116:  "Team_VehicleNotExist",
		20117:  "Team_CreateIndexError",
		20118:  "Team_NotExist",
		20119:  "Team_MemberEmpty",
		20120:  "Team_PlayerSkillIDError",
		20121:  "Team_PlayerSkillInvalid",
		21000:  "Unlock_SchemaNotfound",
		21001:  "Unlock_TypeError",
		21002:  "Unlock_CheckNotHandler",
		21003:  "Unlock_CharacterNotExist",
		22000:  "Level_IsRunning",
		22001:  "Level_SchemaNotExist",
		22002:  "Level_ExitInvalid",
		22003:  "Level_StarInvalid",
		22004:  "Level_ItemNotEnough",
		22005:  "Level_StarIsTooLarge",
		22006:  "Level_ChapterNotExist",
		22007:  "Level_ChapterRewardIndexError",
		22008:  "Level_ChapterRewardIndexInvalid",
		22009:  "Level_ChapterRewardStarNotEnough",
		22010:  "Level_NotPassed",
		23000:  "Raffle_GachaNotExist",
		23001:  "Raffle_PoolNotExist",
		23002:  "Raffle_PoolNotUnlock",
		23003:  "Raffle_CostNotEnough",
		23004:  "Raffle_SchemaError",
		23005:  "Raffle_DrawTypeError",
		23006:  "Raffle_FreeDrawInvalid",
		23007:  "Raffle_NoMoreFreeCount",
		23008:  "Raffle_NoMoreCount",
		23009:  "Raffle_TicketNotEnough",
		23010:  "Raffle_ParamError",
		23011:  "Raffle_NoPatioExchange",
		23012:  "Raffle_PatioIndexError",
		23013:  "Raffle_NotEnoughPatioCoin",
		24000:  "Mail_WaittingData",
		24001:  "Mail_NotExist",
		24002:  "Mail_NoItems",
		24003:  "Mail_Cliamed",
		24004:  "Mail_CantDeleteNoClaimed",
		25000:  "PlayerSkill_NotExist",
		25001:  "PlayerSkill_IsFull",
		25002:  "PlayerSkill_LayerNotOpen",
		25003:  "PlayerSkill_LayerCfgError",
		25004:  "PlayerSkill_CostNotEnough",
		25005:  "PlayerSkill_ParamError",
		30000:  "NicknameExist",
		30001:  "Task_SchemaNotExist",
		30002:  "Task_AlreadyClaimed",
		30003:  "Task_NotDone",
		30004:  "Task_CheckTypeNotExist",
		31000:  "Shop_SchemaNotExist",
		31001:  "Shop_GoodSchemaNotExist",
		31002:  "Shop_NotExist",
		31003:  "Shop_ParamError",
		31004:  "Shop_PurchaseCountNotEnough",
		31005:  "Shop_ItemNotEnough",
		32000:  "Pvp_CharacterNotExist",
		32001:  "Pvp_VehicleNotExist",
		32002:  "Pvp_NeedCharacterOrVehicle",
		32003:  "Pvp_SystemError",
		32004:  "Pvp_ActorDataNotExist",
		32005:  "Pvp_TeamDataNotExist",
		32006:  "Pvp_TooFast",
		32007:  "Pvp_NoRivalsData",
		32008:  "Pvp_RivalSelected",
		32009:  "Pvp_RivalNotExist",
		32010:  "Pvp_CostNotEnough",
		32011:  "Pvp_ResultStatusError",
		32012:  "Pvp_ResultKeyError",
		40001:  "Purchase_IOS_SignedStringError",
		40002:  "Purchase_HttpError",
		40003:  "Purchase_Failed",
		40004:  "Purchase_IOS_JsonError",
		40005:  "Purchase_ActorOffline",
		40006:  "Purchase_ProductIDError",
		40007:  "Purchase_TransactionDuplicate",
		40008:  "Purchase_PlatformInvalid",
		40009:  "Purchase_AppAccountTokenError",
		40010:  "Purchase_DebugRun",
		100001: "GiftCode_ParamError",
		100004: "GiftCode_CodeError",
		100005: "GiftCode_ParamError2",
		100006: "GiftCode_CountLimit",
		100008: "GiftCode_OutOfDate",
		100009: "GiftCode_NotOpen",
		100010: "GiftCode_OutOfServer",
		100011: "GiftCode_TooFast",
		100012: "GiftCode_NotEnough",
		100013: "GiftCode_AuthError",
		100014: "GiftCode_Busy",
		100015: "GiftCode_SendItemError",
		100016: "GiftCode_CodeInvalid",
		100017: "GiftCode_CountLimit2",
		100018: "GiftCode_ServerError",
		100022: "GiftCode_ServerError2",
		500001: "GiftCode_ServerError3",
		500002: "GiftCode_ServerError4",
	}
	OpResult_value = map[string]int32{
		"Ok":                                  0,
		"TooFast":                             1,
		"Item_CfgError":                       10000,
		"Item_CfgTypeError":                   10001,
		"Item_CfgSystemError":                 10002,
		"Item_CannotUse":                      10003,
		"Item_NotEnough":                      10004,
		"Item_SelectedNotExist":               10005,
		"Character_NotExist":                  20000,
		"Character_LevelFull":                 20001,
		"Character_BreakCfgError":             20002,
		"Character_UpgradeLevelParamError":    20003,
		"Character_UpgradeLevelExpNotEnough":  20004,
		"Character_UpgradeTypeError":          20005,
		"Character_BreakCfgCountError":        20006,
		"Character_UpgradeLevelItemNotEnough": 20007,
		"Vehicle_NotExist":                    20008,
		"Vehicle_UpgradeTypeError":            20009,
		"Vehicle_UpgradeCfgError":             20010,
		"Vehicle_UpgradeFull":                 20011,
		"Vehicle_UpgradeCostNotEnough":        20012,
		"Vehicle_UpgradeParamError":           20013,
		"Team_NameIsTooLong":                  20113,
		"Team_CharacterIDError":               20114,
		"Team_CharacterNotExist":              20115,
		"Team_VehicleNotExist":                20116,
		"Team_CreateIndexError":               20117,
		"Team_NotExist":                       20118,
		"Team_MemberEmpty":                    20119,
		"Team_PlayerSkillIDError":             20120,
		"Team_PlayerSkillInvalid":             20121,
		"Unlock_SchemaNotfound":               21000,
		"Unlock_TypeError":                    21001,
		"Unlock_CheckNotHandler":              21002,
		"Unlock_CharacterNotExist":            21003,
		"Level_IsRunning":                     22000,
		"Level_SchemaNotExist":                22001,
		"Level_ExitInvalid":                   22002,
		"Level_StarInvalid":                   22003,
		"Level_ItemNotEnough":                 22004,
		"Level_StarIsTooLarge":                22005,
		"Level_ChapterNotExist":               22006,
		"Level_ChapterRewardIndexError":       22007,
		"Level_ChapterRewardIndexInvalid":     22008,
		"Level_ChapterRewardStarNotEnough":    22009,
		"Level_NotPassed":                     22010,
		"Raffle_GachaNotExist":                23000,
		"Raffle_PoolNotExist":                 23001,
		"Raffle_PoolNotUnlock":                23002,
		"Raffle_CostNotEnough":                23003,
		"Raffle_SchemaError":                  23004,
		"Raffle_DrawTypeError":                23005,
		"Raffle_FreeDrawInvalid":              23006,
		"Raffle_NoMoreFreeCount":              23007,
		"Raffle_NoMoreCount":                  23008,
		"Raffle_TicketNotEnough":              23009,
		"Raffle_ParamError":                   23010,
		"Raffle_NoPatioExchange":              23011,
		"Raffle_PatioIndexError":              23012,
		"Raffle_NotEnoughPatioCoin":           23013,
		"Mail_WaittingData":                   24000,
		"Mail_NotExist":                       24001,
		"Mail_NoItems":                        24002,
		"Mail_Cliamed":                        24003,
		"Mail_CantDeleteNoClaimed":            24004,
		"PlayerSkill_NotExist":                25000,
		"PlayerSkill_IsFull":                  25001,
		"PlayerSkill_LayerNotOpen":            25002,
		"PlayerSkill_LayerCfgError":           25003,
		"PlayerSkill_CostNotEnough":           25004,
		"PlayerSkill_ParamError":              25005,
		"NicknameExist":                       30000,
		"Task_SchemaNotExist":                 30001,
		"Task_AlreadyClaimed":                 30002,
		"Task_NotDone":                        30003,
		"Task_CheckTypeNotExist":              30004,
		"Shop_SchemaNotExist":                 31000,
		"Shop_GoodSchemaNotExist":             31001,
		"Shop_NotExist":                       31002,
		"Shop_ParamError":                     31003,
		"Shop_PurchaseCountNotEnough":         31004,
		"Shop_ItemNotEnough":                  31005,
		"Pvp_CharacterNotExist":               32000,
		"Pvp_VehicleNotExist":                 32001,
		"Pvp_NeedCharacterOrVehicle":          32002,
		"Pvp_SystemError":                     32003,
		"Pvp_ActorDataNotExist":               32004,
		"Pvp_TeamDataNotExist":                32005,
		"Pvp_TooFast":                         32006,
		"Pvp_NoRivalsData":                    32007,
		"Pvp_RivalSelected":                   32008,
		"Pvp_RivalNotExist":                   32009,
		"Pvp_CostNotEnough":                   32010,
		"Pvp_ResultStatusError":               32011,
		"Pvp_ResultKeyError":                  32012,
		"Purchase_IOS_SignedStringError":      40001,
		"Purchase_HttpError":                  40002,
		"Purchase_Failed":                     40003,
		"Purchase_IOS_JsonError":              40004,
		"Purchase_ActorOffline":               40005,
		"Purchase_ProductIDError":             40006,
		"Purchase_TransactionDuplicate":       40007,
		"Purchase_PlatformInvalid":            40008,
		"Purchase_AppAccountTokenError":       40009,
		"Purchase_DebugRun":                   40010,
		"GiftCode_ParamError":                 100001,
		"GiftCode_CodeError":                  100004,
		"GiftCode_ParamError2":                100005,
		"GiftCode_CountLimit":                 100006,
		"GiftCode_OutOfDate":                  100008,
		"GiftCode_NotOpen":                    100009,
		"GiftCode_OutOfServer":                100010,
		"GiftCode_TooFast":                    100011,
		"GiftCode_NotEnough":                  100012,
		"GiftCode_AuthError":                  100013,
		"GiftCode_Busy":                       100014,
		"GiftCode_SendItemError":              100015,
		"GiftCode_CodeInvalid":                100016,
		"GiftCode_CountLimit2":                100017,
		"GiftCode_ServerError":                100018,
		"GiftCode_ServerError2":               100022,
		"GiftCode_ServerError3":               500001,
		"GiftCode_ServerError4":               500002,
	}
)

func (x OpResult) Enum() *OpResult {
	p := new(OpResult)
	*p = x
	return p
}

func (x OpResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpResult) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[3].Descriptor()
}

func (OpResult) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[3]
}

func (x OpResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpResult.Descriptor instead.
func (OpResult) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

// 角色属性
type ActorProp int32

const (
	ActorProp_AccountID    ActorProp = 0 // 账号ID
	ActorProp_ActorID      ActorProp = 1 // 角色ID
	ActorProp_Nickname     ActorProp = 2 // 昵称
	ActorProp_HeadIcon     ActorProp = 3 // 头像
	ActorProp_CreateTime   ActorProp = 4 // 创建时间
	ActorProp_LastLogin    ActorProp = 5 // 最后登录时间
	ActorProp_SetNickTime  ActorProp = 6 // 昵称修改时间
	ActorProp_LogoutTime   ActorProp = 7 // 退出游戏时间
	ActorProp_Level        ActorProp = 8 // 等级
	ActorProp_Exp          ActorProp = 9 // 经验
	ActorProp_LocalAccount ActorProp = 10
	ActorProp_AP_Max       ActorProp = 11
)

// Enum value maps for ActorProp.
var (
	ActorProp_name = map[int32]string{
		0:  "AccountID",
		1:  "ActorID",
		2:  "Nickname",
		3:  "HeadIcon",
		4:  "CreateTime",
		5:  "LastLogin",
		6:  "SetNickTime",
		7:  "LogoutTime",
		8:  "Level",
		9:  "Exp",
		10: "LocalAccount",
		11: "AP_Max",
	}
	ActorProp_value = map[string]int32{
		"AccountID":    0,
		"ActorID":      1,
		"Nickname":     2,
		"HeadIcon":     3,
		"CreateTime":   4,
		"LastLogin":    5,
		"SetNickTime":  6,
		"LogoutTime":   7,
		"Level":        8,
		"Exp":          9,
		"LocalAccount": 10,
		"AP_Max":       11,
	}
)

func (x ActorProp) Enum() *ActorProp {
	p := new(ActorProp)
	*p = x
	return p
}

func (x ActorProp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActorProp) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[4].Descriptor()
}

func (ActorProp) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[4]
}

func (x ActorProp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActorProp.Descriptor instead.
func (ActorProp) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

type LogicID int32

const (
	LogicID_DayChangeTime LogicID = 0 // 下一次跨天的时间
	// LevelInfo = 1;      // 关卡数据
	LogicID_RaffleInfo        LogicID = 2    // 抽奖数据
	LogicID_BattleTeam        LogicID = 3    // 编组数据
	LogicID_EnergyRecoverTime LogicID = 4    // 上一次体力恢复时间
	LogicID_WeekChangeTime    LogicID = 5    // 下一次跨周的时间
	LogicID_LastMailID        LogicID = 6    // 最后领取的全局邮件ID
	LogicID_SignCount         LogicID = 7    // 签到计数
	LogicID_MonthChangeTime   LogicID = 8    // 下一次跨月的时间
	LogicID_Shop              LogicID = 9    // 商店数据
	LogicID_PlayerSkill       LogicID = 10   // 指挥官技能数据
	LogicID_LID_Max           LogicID = 5000 // 最大值
)

// Enum value maps for LogicID.
var (
	LogicID_name = map[int32]string{
		0:    "DayChangeTime",
		2:    "RaffleInfo",
		3:    "BattleTeam",
		4:    "EnergyRecoverTime",
		5:    "WeekChangeTime",
		6:    "LastMailID",
		7:    "SignCount",
		8:    "MonthChangeTime",
		9:    "Shop",
		10:   "PlayerSkill",
		5000: "LID_Max",
	}
	LogicID_value = map[string]int32{
		"DayChangeTime":     0,
		"RaffleInfo":        2,
		"BattleTeam":        3,
		"EnergyRecoverTime": 4,
		"WeekChangeTime":    5,
		"LastMailID":        6,
		"SignCount":         7,
		"MonthChangeTime":   8,
		"Shop":              9,
		"PlayerSkill":       10,
		"LID_Max":           5000,
	}
)

func (x LogicID) Enum() *LogicID {
	p := new(LogicID)
	*p = x
	return p
}

func (x LogicID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogicID) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[5].Descriptor()
}

func (LogicID) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[5]
}

func (x LogicID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogicID.Descriptor instead.
func (LogicID) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{5}
}

// 物品获取来源
type ItemSource int32

const (
	ItemSource_LevelPass_Normal   ItemSource = 0 // 常规通关奖励
	ItemSource_LevelPass_First    ItemSource = 1 // 首次通关奖励
	ItemSource_LevelPass_Star1    ItemSource = 2 // 通关1星级奖励
	ItemSource_LevelPass_Star2    ItemSource = 3 // 通关2星级奖励
	ItemSource_LevelPass_Star3    ItemSource = 4 // 通关3星级奖励
	ItemSource_ChapterStar        ItemSource = 5 // 章节星数宝箱
	ItemSource_Raffle             ItemSource = 6 // 抽卡
	ItemSource_GiftCode           ItemSource = 7 // 礼包码兑换
	ItemSource_MailItem           ItemSource = 8 // 邮件附件
	ItemSource_Task               ItemSource = 9 // 任务奖励
	ItemSource_ShopPurchase       ItemSource = 10
	ItemSource_PatioExchange      ItemSource = 11 // 天井兑换
	ItemSource_CurrencyShop       ItemSource = 12 // 内购商品
	ItemSource_UseItem            ItemSource = 13 // 普通使用物品
	ItemSource_UseItemChest       ItemSource = 14 // 使用宝箱
	ItemSource_UseSelectableChest ItemSource = 15 // 使用自选宝箱
	ItemSource_Max                ItemSource = 16
)

// Enum value maps for ItemSource.
var (
	ItemSource_name = map[int32]string{
		0:  "LevelPass_Normal",
		1:  "LevelPass_First",
		2:  "LevelPass_Star1",
		3:  "LevelPass_Star2",
		4:  "LevelPass_Star3",
		5:  "ChapterStar",
		6:  "Raffle",
		7:  "GiftCode",
		8:  "MailItem",
		9:  "Task",
		10: "ShopPurchase",
		11: "PatioExchange",
		12: "CurrencyShop",
		13: "UseItem",
		14: "UseItemChest",
		15: "UseSelectableChest",
		16: "Max",
	}
	ItemSource_value = map[string]int32{
		"LevelPass_Normal":   0,
		"LevelPass_First":    1,
		"LevelPass_Star1":    2,
		"LevelPass_Star2":    3,
		"LevelPass_Star3":    4,
		"ChapterStar":        5,
		"Raffle":             6,
		"GiftCode":           7,
		"MailItem":           8,
		"Task":               9,
		"ShopPurchase":       10,
		"PatioExchange":      11,
		"CurrencyShop":       12,
		"UseItem":            13,
		"UseItemChest":       14,
		"UseSelectableChest": 15,
		"Max":                16,
	}
)

func (x ItemSource) Enum() *ItemSource {
	p := new(ItemSource)
	*p = x
	return p
}

func (x ItemSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ItemSource) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[6].Descriptor()
}

func (ItemSource) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[6]
}

func (x ItemSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ItemSource.Descriptor instead.
func (ItemSource) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{6}
}

type TaskStatus int32

const (
	TaskStatus_TSInvalid TaskStatus = 0 // 无效
	TaskStatus_NewTask   TaskStatus = 1 // 新任务
	TaskStatus_TSClaimed TaskStatus = 2 // 已领取奖励
	TaskStatus_Done      TaskStatus = 3 // 已完成
)

// Enum value maps for TaskStatus.
var (
	TaskStatus_name = map[int32]string{
		0: "TSInvalid",
		1: "NewTask",
		2: "TSClaimed",
		3: "Done",
	}
	TaskStatus_value = map[string]int32{
		"TSInvalid": 0,
		"NewTask":   1,
		"TSClaimed": 2,
		"Done":      3,
	}
)

func (x TaskStatus) Enum() *TaskStatus {
	p := new(TaskStatus)
	*p = x
	return p
}

func (x TaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[7].Descriptor()
}

func (TaskStatus) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[7]
}

func (x TaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStatus.Descriptor instead.
func (TaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{7}
}

type MailStatus int32

const (
	MailStatus_New     MailStatus = 0 // 新邮件
	MailStatus_Opened  MailStatus = 1 // 已打开
	MailStatus_Cliamed MailStatus = 2 // 以收取附件
)

// Enum value maps for MailStatus.
var (
	MailStatus_name = map[int32]string{
		0: "New",
		1: "Opened",
		2: "Cliamed",
	}
	MailStatus_value = map[string]int32{
		"New":     0,
		"Opened":  1,
		"Cliamed": 2,
	}
)

func (x MailStatus) Enum() *MailStatus {
	p := new(MailStatus)
	*p = x
	return p
}

func (x MailStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MailStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[8].Descriptor()
}

func (MailStatus) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[8]
}

func (x MailStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MailStatus.Descriptor instead.
func (MailStatus) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{8}
}

var File_common_proto protoreflect.FileDescriptor

var file_common_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x4e, 0x4c, 0x44, 0x5f, 0x50, 0x42, 0x2a, 0x95, 0x01, 0x0a, 0x0c, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x44, 0x5f, 0x4e, 0x6f,
	0x6e, 0x65, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x74, 0x61,
	0x72, 0x5f, 0x31, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x74,
	0x61, 0x72, 0x5f, 0x32, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x61, 0x78, 0x54,
	0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x4d,
	0x61, 0x78, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x10, 0x18, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x61, 0x78, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x10, 0x03, 0x1a, 0x02, 0x10, 0x01, 0x2a, 0x8a,
	0x01, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x52, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x46, 0x75, 0x6c, 0x6c, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x54,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x73, 0x67,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x52, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09,
	0x41, 0x75, 0x74, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x07, 0x2a, 0xb5, 0x02, 0x0a, 0x0b,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x65, 0x64,
	0x69, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x52, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x44,
	0x42, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x49, 0x44, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x06, 0x12, 0x0d, 0x0a,
	0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10,
	0x4c, 0x52, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65,
	0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x75, 0x74, 0x68,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e,
	0x52, 0x65, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x0c,
	0x12, 0x15, 0x0a, 0x11, 0x52, 0x65, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x0d, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x65, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x0e, 0x12,
	0x12, 0x0a, 0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x10, 0x0f, 0x2a, 0xf3, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x06, 0x0a, 0x02, 0x4f, 0x6b, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x6f, 0x6f, 0x46,
	0x61, 0x73, 0x74, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x49, 0x74, 0x65, 0x6d, 0x5f, 0x43, 0x66,
	0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x90, 0x4e, 0x12, 0x16, 0x0a, 0x11, 0x49, 0x74, 0x65,
	0x6d, 0x5f, 0x43, 0x66, 0x67, 0x54, 0x79, 0x70, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x91,
	0x4e, 0x12, 0x18, 0x0a, 0x13, 0x49, 0x74, 0x65, 0x6d, 0x5f, 0x43, 0x66, 0x67, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x92, 0x4e, 0x12, 0x13, 0x0a, 0x0e, 0x49,
	0x74, 0x65, 0x6d, 0x5f, 0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x10, 0x93, 0x4e,
	0x12, 0x13, 0x0a, 0x0e, 0x49, 0x74, 0x65, 0x6d, 0x5f, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f, 0x75,
	0x67, 0x68, 0x10, 0x94, 0x4e, 0x12, 0x1a, 0x0a, 0x15, 0x49, 0x74, 0x65, 0x6d, 0x5f, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x95,
	0x4e, 0x12, 0x18, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x4e,
	0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0xa0, 0x9c, 0x01, 0x12, 0x19, 0x0a, 0x13, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x46, 0x75,
	0x6c, 0x6c, 0x10, 0xa1, 0x9c, 0x01, 0x12, 0x1d, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x5f, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x43, 0x66, 0x67, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x10, 0xa2, 0x9c, 0x01, 0x12, 0x26, 0x0a, 0x20, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x5f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xa3, 0x9c, 0x01, 0x12, 0x28, 0x0a,
	0x22, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x78, 0x70, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f,
	0x75, 0x67, 0x68, 0x10, 0xa4, 0x9c, 0x01, 0x12, 0x20, 0x0a, 0x1a, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x5f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xa5, 0x9c, 0x01, 0x12, 0x22, 0x0a, 0x1c, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x43, 0x66, 0x67, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xa6, 0x9c, 0x01, 0x12, 0x29, 0x0a,
	0x23, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x74, 0x45, 0x6e,
	0x6f, 0x75, 0x67, 0x68, 0x10, 0xa7, 0x9c, 0x01, 0x12, 0x16, 0x0a, 0x10, 0x56, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0xa8, 0x9c, 0x01,
	0x12, 0x1e, 0x0a, 0x18, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xa9, 0x9c, 0x01,
	0x12, 0x1d, 0x0a, 0x17, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x43, 0x66, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xaa, 0x9c, 0x01, 0x12,
	0x19, 0x0a, 0x13, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x10, 0xab, 0x9c, 0x01, 0x12, 0x22, 0x0a, 0x1c, 0x56, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x73,
	0x74, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x10, 0xac, 0x9c, 0x01, 0x12, 0x1f,
	0x0a, 0x19, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xad, 0x9c, 0x01, 0x12,
	0x18, 0x0a, 0x12, 0x54, 0x65, 0x61, 0x6d, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x73, 0x54, 0x6f,
	0x6f, 0x4c, 0x6f, 0x6e, 0x67, 0x10, 0x91, 0x9d, 0x01, 0x12, 0x1b, 0x0a, 0x15, 0x54, 0x65, 0x61,
	0x6d, 0x5f, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x44, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0x92, 0x9d, 0x01, 0x12, 0x1c, 0x0a, 0x16, 0x54, 0x65, 0x61, 0x6d, 0x5f, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x10, 0x93, 0x9d, 0x01, 0x12, 0x1a, 0x0a, 0x14, 0x54, 0x65, 0x61, 0x6d, 0x5f, 0x56, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x94, 0x9d, 0x01,
	0x12, 0x1b, 0x0a, 0x15, 0x54, 0x65, 0x61, 0x6d, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x95, 0x9d, 0x01, 0x12, 0x13, 0x0a,
	0x0d, 0x54, 0x65, 0x61, 0x6d, 0x5f, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x96,
	0x9d, 0x01, 0x12, 0x16, 0x0a, 0x10, 0x54, 0x65, 0x61, 0x6d, 0x5f, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x10, 0x97, 0x9d, 0x01, 0x12, 0x1d, 0x0a, 0x17, 0x54, 0x65,
	0x61, 0x6d, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x44,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x98, 0x9d, 0x01, 0x12, 0x1d, 0x0a, 0x17, 0x54, 0x65, 0x61,
	0x6d, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x10, 0x99, 0x9d, 0x01, 0x12, 0x1b, 0x0a, 0x15, 0x55, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x6f, 0x74, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x10, 0x88, 0xa4, 0x01, 0x12, 0x16, 0x0a, 0x10, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x54, 0x79, 0x70, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x89, 0xa4, 0x01, 0x12, 0x1c, 0x0a,
	0x16, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x6f, 0x74,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x10, 0x8a, 0xa4, 0x01, 0x12, 0x1e, 0x0a, 0x18, 0x55,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4e,
	0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x8b, 0xa4, 0x01, 0x12, 0x15, 0x0a, 0x0f, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x49, 0x73, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0xf0,
	0xab, 0x01, 0x12, 0x1a, 0x0a, 0x14, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0xf1, 0xab, 0x01, 0x12, 0x17,
	0x0a, 0x11, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x45, 0x78, 0x69, 0x74, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x10, 0xf2, 0xab, 0x01, 0x12, 0x17, 0x0a, 0x11, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x53, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0xf3, 0xab, 0x01,
	0x12, 0x19, 0x0a, 0x13, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x6f,
	0x74, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x10, 0xf4, 0xab, 0x01, 0x12, 0x1a, 0x0a, 0x14, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x49, 0x73, 0x54, 0x6f, 0x6f, 0x4c, 0x61,
	0x72, 0x67, 0x65, 0x10, 0xf5, 0xab, 0x01, 0x12, 0x1b, 0x0a, 0x15, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x10, 0xf6, 0xab, 0x01, 0x12, 0x23, 0x0a, 0x1d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x43, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xf7, 0xab, 0x01, 0x12, 0x25, 0x0a, 0x1f, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0xf8, 0xab, 0x01,
	0x12, 0x26, 0x0a, 0x20, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x72, 0x4e, 0x6f, 0x74, 0x45, 0x6e,
	0x6f, 0x75, 0x67, 0x68, 0x10, 0xf9, 0xab, 0x01, 0x12, 0x15, 0x0a, 0x0f, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x4e, 0x6f, 0x74, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x10, 0xfa, 0xab, 0x01, 0x12,
	0x1a, 0x0a, 0x14, 0x52, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x47, 0x61, 0x63, 0x68, 0x61, 0x4e,
	0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0xd8, 0xb3, 0x01, 0x12, 0x19, 0x0a, 0x13, 0x52,
	0x61, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x50, 0x6f, 0x6f, 0x6c, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x10, 0xd9, 0xb3, 0x01, 0x12, 0x1a, 0x0a, 0x14, 0x52, 0x61, 0x66, 0x66, 0x6c, 0x65,
	0x5f, 0x50, 0x6f, 0x6f, 0x6c, 0x4e, 0x6f, 0x74, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x10, 0xda,
	0xb3, 0x01, 0x12, 0x1a, 0x0a, 0x14, 0x52, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x43, 0x6f, 0x73,
	0x74, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x10, 0xdb, 0xb3, 0x01, 0x12, 0x18,
	0x0a, 0x12, 0x52, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x10, 0xdc, 0xb3, 0x01, 0x12, 0x1a, 0x0a, 0x14, 0x52, 0x61, 0x66, 0x66,
	0x6c, 0x65, 0x5f, 0x44, 0x72, 0x61, 0x77, 0x54, 0x79, 0x70, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0xdd, 0xb3, 0x01, 0x12, 0x1c, 0x0a, 0x16, 0x52, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x46,
	0x72, 0x65, 0x65, 0x44, 0x72, 0x61, 0x77, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0xde,
	0xb3, 0x01, 0x12, 0x1c, 0x0a, 0x16, 0x52, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x4e, 0x6f, 0x4d,
	0x6f, 0x72, 0x65, 0x46, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0xdf, 0xb3, 0x01,
	0x12, 0x18, 0x0a, 0x12, 0x52, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x4e, 0x6f, 0x4d, 0x6f, 0x72,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0xe0, 0xb3, 0x01, 0x12, 0x1c, 0x0a, 0x16, 0x52, 0x61,
	0x66, 0x66, 0x6c, 0x65, 0x5f, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x45, 0x6e,
	0x6f, 0x75, 0x67, 0x68, 0x10, 0xe1, 0xb3, 0x01, 0x12, 0x17, 0x0a, 0x11, 0x52, 0x61, 0x66, 0x66,
	0x6c, 0x65, 0x5f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xe2, 0xb3,
	0x01, 0x12, 0x1c, 0x0a, 0x16, 0x52, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x4e, 0x6f, 0x50, 0x61,
	0x74, 0x69, 0x6f, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0xe3, 0xb3, 0x01, 0x12,
	0x1c, 0x0a, 0x16, 0x52, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x50, 0x61, 0x74, 0x69, 0x6f, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xe4, 0xb3, 0x01, 0x12, 0x1f, 0x0a,
	0x19, 0x52, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f, 0x75, 0x67,
	0x68, 0x50, 0x61, 0x74, 0x69, 0x6f, 0x43, 0x6f, 0x69, 0x6e, 0x10, 0xe5, 0xb3, 0x01, 0x12, 0x17,
	0x0a, 0x11, 0x4d, 0x61, 0x69, 0x6c, 0x5f, 0x57, 0x61, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x10, 0xc0, 0xbb, 0x01, 0x12, 0x13, 0x0a, 0x0d, 0x4d, 0x61, 0x69, 0x6c, 0x5f,
	0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0xc1, 0xbb, 0x01, 0x12, 0x12, 0x0a, 0x0c,
	0x4d, 0x61, 0x69, 0x6c, 0x5f, 0x4e, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x10, 0xc2, 0xbb, 0x01,
	0x12, 0x12, 0x0a, 0x0c, 0x4d, 0x61, 0x69, 0x6c, 0x5f, 0x43, 0x6c, 0x69, 0x61, 0x6d, 0x65, 0x64,
	0x10, 0xc3, 0xbb, 0x01, 0x12, 0x1e, 0x0a, 0x18, 0x4d, 0x61, 0x69, 0x6c, 0x5f, 0x43, 0x61, 0x6e,
	0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64,
	0x10, 0xc4, 0xbb, 0x01, 0x12, 0x1a, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x5f, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0xa8, 0xc3, 0x01,
	0x12, 0x18, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x5f,
	0x49, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x10, 0xa9, 0xc3, 0x01, 0x12, 0x1e, 0x0a, 0x18, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x4e,
	0x6f, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x10, 0xaa, 0xc3, 0x01, 0x12, 0x1f, 0x0a, 0x19, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x43,
	0x66, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xab, 0xc3, 0x01, 0x12, 0x1f, 0x0a, 0x19, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x43, 0x6f, 0x73, 0x74, 0x4e,
	0x6f, 0x74, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x10, 0xac, 0xc3, 0x01, 0x12, 0x1c, 0x0a, 0x16,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xad, 0xc3, 0x01, 0x12, 0x13, 0x0a, 0x0d, 0x4e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0xb0, 0xea, 0x01, 0x12,
	0x19, 0x0a, 0x13, 0x54, 0x61, 0x73, 0x6b, 0x5f, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x6f,
	0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0xb1, 0xea, 0x01, 0x12, 0x19, 0x0a, 0x13, 0x54, 0x61,
	0x73, 0x6b, 0x5f, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65,
	0x64, 0x10, 0xb2, 0xea, 0x01, 0x12, 0x12, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x5f, 0x4e, 0x6f,
	0x74, 0x44, 0x6f, 0x6e, 0x65, 0x10, 0xb3, 0xea, 0x01, 0x12, 0x1c, 0x0a, 0x16, 0x54, 0x61, 0x73,
	0x6b, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x74, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x10, 0xb4, 0xea, 0x01, 0x12, 0x19, 0x0a, 0x13, 0x53, 0x68, 0x6f, 0x70, 0x5f,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x98,
	0xf2, 0x01, 0x12, 0x1d, 0x0a, 0x17, 0x53, 0x68, 0x6f, 0x70, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x99, 0xf2,
	0x01, 0x12, 0x13, 0x0a, 0x0d, 0x53, 0x68, 0x6f, 0x70, 0x5f, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x10, 0x9a, 0xf2, 0x01, 0x12, 0x15, 0x0a, 0x0f, 0x53, 0x68, 0x6f, 0x70, 0x5f, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x9b, 0xf2, 0x01, 0x12, 0x21, 0x0a,
	0x1b, 0x53, 0x68, 0x6f, 0x70, 0x5f, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x10, 0x9c, 0xf2, 0x01,
	0x12, 0x18, 0x0a, 0x12, 0x53, 0x68, 0x6f, 0x70, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x74,
	0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x10, 0x9d, 0xf2, 0x01, 0x12, 0x1b, 0x0a, 0x15, 0x50, 0x76,
	0x70, 0x5f, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x10, 0x80, 0xfa, 0x01, 0x12, 0x19, 0x0a, 0x13, 0x50, 0x76, 0x70, 0x5f, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x81,
	0xfa, 0x01, 0x12, 0x20, 0x0a, 0x1a, 0x50, 0x76, 0x70, 0x5f, 0x4e, 0x65, 0x65, 0x64, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x10, 0x82, 0xfa, 0x01, 0x12, 0x15, 0x0a, 0x0f, 0x50, 0x76, 0x70, 0x5f, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x83, 0xfa, 0x01, 0x12, 0x1b, 0x0a, 0x15, 0x50,
	0x76, 0x70, 0x5f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x74, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x10, 0x84, 0xfa, 0x01, 0x12, 0x1a, 0x0a, 0x14, 0x50, 0x76, 0x70, 0x5f,
	0x54, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x10, 0x85, 0xfa, 0x01, 0x12, 0x11, 0x0a, 0x0b, 0x50, 0x76, 0x70, 0x5f, 0x54, 0x6f, 0x6f, 0x46,
	0x61, 0x73, 0x74, 0x10, 0x86, 0xfa, 0x01, 0x12, 0x16, 0x0a, 0x10, 0x50, 0x76, 0x70, 0x5f, 0x4e,
	0x6f, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x44, 0x61, 0x74, 0x61, 0x10, 0x87, 0xfa, 0x01, 0x12,
	0x17, 0x0a, 0x11, 0x50, 0x76, 0x70, 0x5f, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x10, 0x88, 0xfa, 0x01, 0x12, 0x17, 0x0a, 0x11, 0x50, 0x76, 0x70, 0x5f,
	0x52, 0x69, 0x76, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x89, 0xfa,
	0x01, 0x12, 0x17, 0x0a, 0x11, 0x50, 0x76, 0x70, 0x5f, 0x43, 0x6f, 0x73, 0x74, 0x4e, 0x6f, 0x74,
	0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x10, 0x8a, 0xfa, 0x01, 0x12, 0x1b, 0x0a, 0x15, 0x50, 0x76,
	0x70, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x10, 0x8b, 0xfa, 0x01, 0x12, 0x18, 0x0a, 0x12, 0x50, 0x76, 0x70, 0x5f, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x4b, 0x65, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x8c, 0xfa,
	0x01, 0x12, 0x24, 0x0a, 0x1e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x49, 0x4f,
	0x53, 0x5f, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x10, 0xc1, 0xb8, 0x02, 0x12, 0x18, 0x0a, 0x12, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x48, 0x74, 0x74, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xc2, 0xb8,
	0x02, 0x12, 0x15, 0x0a, 0x0f, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x10, 0xc3, 0xb8, 0x02, 0x12, 0x1c, 0x0a, 0x16, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x5f, 0x49, 0x4f, 0x53, 0x5f, 0x4a, 0x73, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0xc4, 0xb8, 0x02, 0x12, 0x1b, 0x0a, 0x15, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x10,
	0xc5, 0xb8, 0x02, 0x12, 0x1d, 0x0a, 0x17, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xc6,
	0xb8, 0x02, 0x12, 0x23, 0x0a, 0x1d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x10, 0xc7, 0xb8, 0x02, 0x12, 0x1e, 0x0a, 0x18, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x10, 0xc8, 0xb8, 0x02, 0x12, 0x23, 0x0a, 0x1d, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x41, 0x70, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xc9, 0xb8, 0x02, 0x12, 0x17, 0x0a, 0x11,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x75,
	0x6e, 0x10, 0xca, 0xb8, 0x02, 0x12, 0x19, 0x0a, 0x13, 0x47, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x5f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xa1, 0x8d, 0x06,
	0x12, 0x18, 0x0a, 0x12, 0x47, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x6f, 0x64,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xa4, 0x8d, 0x06, 0x12, 0x1a, 0x0a, 0x14, 0x47, 0x69,
	0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x32, 0x10, 0xa5, 0x8d, 0x06, 0x12, 0x19, 0x0a, 0x13, 0x47, 0x69, 0x66, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x5f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0xa6, 0x8d,
	0x06, 0x12, 0x18, 0x0a, 0x12, 0x47, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x4f, 0x75,
	0x74, 0x4f, 0x66, 0x44, 0x61, 0x74, 0x65, 0x10, 0xa8, 0x8d, 0x06, 0x12, 0x16, 0x0a, 0x10, 0x47,
	0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x10,
	0xa9, 0x8d, 0x06, 0x12, 0x1a, 0x0a, 0x14, 0x47, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x5f,
	0x4f, 0x75, 0x74, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x10, 0xaa, 0x8d, 0x06, 0x12,
	0x16, 0x0a, 0x10, 0x47, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x54, 0x6f, 0x6f, 0x46,
	0x61, 0x73, 0x74, 0x10, 0xab, 0x8d, 0x06, 0x12, 0x18, 0x0a, 0x12, 0x47, 0x69, 0x66, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x10, 0xac, 0x8d,
	0x06, 0x12, 0x18, 0x0a, 0x12, 0x47, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x41, 0x75,
	0x74, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xad, 0x8d, 0x06, 0x12, 0x13, 0x0a, 0x0d, 0x47,
	0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x42, 0x75, 0x73, 0x79, 0x10, 0xae, 0x8d, 0x06,
	0x12, 0x1c, 0x0a, 0x16, 0x47, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x65, 0x6e,
	0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xaf, 0x8d, 0x06, 0x12, 0x1a,
	0x0a, 0x14, 0x47, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x6f, 0x64, 0x65, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0xb0, 0x8d, 0x06, 0x12, 0x1a, 0x0a, 0x14, 0x47, 0x69,
	0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x32, 0x10, 0xb1, 0x8d, 0x06, 0x12, 0x1a, 0x0a, 0x14, 0x47, 0x69, 0x66, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xb2,
	0x8d, 0x06, 0x12, 0x1b, 0x0a, 0x15, 0x47, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x32, 0x10, 0xb6, 0x8d, 0x06, 0x12,
	0x1b, 0x0a, 0x15, 0x47, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x33, 0x10, 0xa1, 0xc2, 0x1e, 0x12, 0x1b, 0x0a, 0x15,
	0x47, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x34, 0x10, 0xa2, 0xc2, 0x1e, 0x2a, 0xb5, 0x01, 0x0a, 0x09, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49,
	0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x65, 0x61, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x10, 0x03, 0x12,
	0x0e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x04, 0x12,
	0x0d, 0x0a, 0x09, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x10, 0x05, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x65, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x06, 0x12,
	0x0e, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x07, 0x12,
	0x09, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x78,
	0x70, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x50, 0x5f, 0x4d, 0x61, 0x78, 0x10,
	0x0b, 0x2a, 0xc4, 0x01, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x49, 0x44, 0x12, 0x11, 0x0a,
	0x0d, 0x44, 0x61, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x02,
	0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x10, 0x03,
	0x12, 0x15, 0x0a, 0x11, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x65, 0x65, 0x6b, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x4c,
	0x61, 0x73, 0x74, 0x4d, 0x61, 0x69, 0x6c, 0x49, 0x44, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x69, 0x67, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x08, 0x12,
	0x08, 0x0a, 0x04, 0x53, 0x68, 0x6f, 0x70, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x07, 0x4c, 0x49,
	0x44, 0x5f, 0x4d, 0x61, 0x78, 0x10, 0x88, 0x27, 0x2a, 0xb0, 0x02, 0x0a, 0x0a, 0x49, 0x74, 0x65,
	0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x50, 0x61, 0x73, 0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x5f, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x5f,
	0x53, 0x74, 0x61, 0x72, 0x31, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x50, 0x61, 0x73, 0x73, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x32, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x33, 0x10,
	0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72,
	0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x10, 0x06, 0x12, 0x0c,
	0x0a, 0x08, 0x47, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08,
	0x4d, 0x61, 0x69, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x10, 0x08, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x61,
	0x73, 0x6b, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x68, 0x6f, 0x70, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x61, 0x74, 0x69, 0x6f, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x68, 0x6f, 0x70, 0x10, 0x0c, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x10, 0x0d, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x43, 0x68, 0x65, 0x73, 0x74, 0x10, 0x0e, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x73,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x73, 0x74,
	0x10, 0x0f, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x61, 0x78, 0x10, 0x10, 0x2a, 0x41, 0x0a, 0x0a, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x53, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x65, 0x77, 0x54,
	0x61, 0x73, 0x6b, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x53, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x65, 0x64, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x6f, 0x6e, 0x65, 0x10, 0x03, 0x2a, 0x2e,
	0x0a, 0x0a, 0x4d, 0x61, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x07, 0x0a, 0x03,
	0x4e, 0x65, 0x77, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x6c, 0x69, 0x61, 0x6d, 0x65, 0x64, 0x10, 0x02, 0x42, 0x0b,
	0x5a, 0x09, 0x70, 0x62, 0x2f, 0x78, 0x73, 0x66, 0x5f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_common_proto_rawDescOnce sync.Once
	file_common_proto_rawDescData = file_common_proto_rawDesc
)

func file_common_proto_rawDescGZIP() []byte {
	file_common_proto_rawDescOnce.Do(func() {
		file_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_proto_rawDescData)
	})
	return file_common_proto_rawDescData
}

var file_common_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_common_proto_goTypes = []interface{}{
	(GlobalDefine)(0),     // 0: NLD_PB.GlobalDefine
	(DisconnectReason)(0), // 1: NLD_PB.DisconnectReason
	(LoginResult)(0),      // 2: NLD_PB.LoginResult
	(OpResult)(0),         // 3: NLD_PB.OpResult
	(ActorProp)(0),        // 4: NLD_PB.ActorProp
	(LogicID)(0),          // 5: NLD_PB.LogicID
	(ItemSource)(0),       // 6: NLD_PB.ItemSource
	(TaskStatus)(0),       // 7: NLD_PB.TaskStatus
	(MailStatus)(0),       // 8: NLD_PB.MailStatus
}
var file_common_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_common_proto_init() }
func file_common_proto_init() {
	if File_common_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_proto_goTypes,
		DependencyIndexes: file_common_proto_depIdxs,
		EnumInfos:         file_common_proto_enumTypes,
	}.Build()
	File_common_proto = out.File
	file_common_proto_rawDesc = nil
	file_common_proto_goTypes = nil
	file_common_proto_depIdxs = nil
}
