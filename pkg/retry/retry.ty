package retry

import (
	"github.com/pkg/errors"
	"time"
)

type Retry struct {
	retryCount   int           // 最大重试次数
	retryDelay   time.Duration // 重试之间的延迟
	retryTimeout time.Duration // 超时重试时间
}

type RetriableError struct {
	error error
}

func (e RetriableError) Error() string {
	return e.error.Error()
}

// 重试方法
func (r *Retry) Retry(fn func() error) error {
	retryStart := time.Now()
	var err error
	retryCount := 0

	for {
		err = fn()
		time.Sleep(r.retryDelay)
		//调用成功
		if err == nil {
			return nil
		}

		//错误属于重试
		if _, ok := err.(RetriableError); ok {
			if retryCount < r.retryCount-1 {
				retryCount++
				continue
			}
			break
		}

		if retryStart.Add(r.retryTimeout).Before(time.Now()) {
			break
		}
	}
	return err
}

func New(
	retryCount int,
	retryDelay time.Duration,
	retryTimeout time.Duration,
) *Retry {
	return &Retry{
		retryCount:   retryCount,
		retryDelay:   retryDelay,
		retryTimeout: retryTimeout,
	}
}

func ExampleRetry() {
	r := New(3, 1*time.Second, 5*time.Minute)

	err := r.Retry(func() error {
		// Do some work here
		return RetriableError{error: errors.New("foo")}
	})

	if err != nil {
		panic(err)
	}
}
