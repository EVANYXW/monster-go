// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.23.4
// source: server/s_message_id.proto

package xsf_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SMSGID int32

const (
	SMSGID_SServer_None SMSGID = 0
	SMSGID_ServerStart  SMSGID = 3000 // 服务器协议id起始值
	// MESSAGE_ID_START
	SMSGID_Cc_C_Handshake            SMSGID = 3001 // center connector --> center 握手
	SMSGID_C_Cc_Handshake            SMSGID = 3002 // center  --> center connector 握手反馈
	SMSGID_Cc_C_Heartbeat            SMSGID = 3003 // center connector --> center 心跳
	SMSGID_Cc_C_ServerInfo           SMSGID = 3005 // connector --> center 上行服务器信息数据
	SMSGID_C_Cc_ServerInfo           SMSGID = 3006 // center --> connector 下行服务器信息数据
	SMSGID_Cc_C_ServerLost           SMSGID = 3007 // connector --> center 服务器离线
	SMSGID_C_Cc_ServerLost           SMSGID = 3008 // center --> connector 服务器离线
	SMSGID_Cc_C_ServerOk             SMSGID = 3009 // connector --> center 服务器已准备好
	SMSGID_C_Cc_ServerOk             SMSGID = 3010 // center --> connector 服务器已准备好
	SMSGID_C_Cc_Stop                 SMSGID = 3011 // center --> connector 关服
	SMSGID_Cc_C_TimePass             SMSGID = 3012 // connector --> center 设置时间穿越
	SMSGID_C_Cc_TimePass             SMSGID = 3013 // center --> connector 设置时间穿越
	SMSGID_Gt_GtA_Handshake          SMSGID = 3100 // gate --> gate acceptor 握手
	SMSGID_GtA_Gt_Handshake          SMSGID = 3101 // gate acceptor --> gate  握手反馈
	SMSGID_Gt_GtA_Heartbeat          SMSGID = 3102 // gate --> gate acceptor 心跳
	SMSGID_Gt_GtA_ClientClose        SMSGID = 3103 // gete --> gate acceptor 客户端连接关闭
	SMSGID_GtA_Gt_ClientDisconnect   SMSGID = 3104 // gate acceptor --> gate 主动关闭客户端连接
	SMSGID_GtA_Gt_ClientMessage      SMSGID = 3105 // gate acceptor --> gate 发往客户端消息
	SMSGID_GtA_Gt_Broadcast          SMSGID = 3106 // gate acceptor --> gate 广播消息
	SMSGID_GtA_Gt_SetServerID        SMSGID = 3107 // gate acceptor --> gate 设置服务器id
	SMSGID_L_G_Login                 SMSGID = 3500 // login --> game 玩家登录
	SMSGID_Mg_L_GMCommand            SMSGID = 3501 // manager -- > login GM指令
	SMSGID_L_G_GMCommand             SMSGID = 3502 // login --> game GM指令
	SMSGID_S_Mg_GMCommandResult      SMSGID = 3503 // server --> manager GM指令结果
	SMSGID_G_Mg_CheckNickname        SMSGID = 3504 // game --> manager 检查昵称
	SMSGID_Mg_G_CheckNickname        SMSGID = 3505 // manager --> game 检查昵称结果
	SMSGID_G_Mg_NicknameUpdate       SMSGID = 3506 // game --> manager 更新昵称
	SMSGID_G_Mg_NewActor             SMSGID = 3507 // game --> manager 新角色
	SMSGID_G_S_ActorLogin            SMSGID = 3508 // game --> server 玩家登录
	SMSGID_G_S_ActorRelease          SMSGID = 3509 // game --> server 玩家对象释放
	SMSGID_Ml_G_ActorMailData        SMSGID = 3510 // mail --> game 设置玩家邮件数据
	SMSGID_Ml_G_AddItem              SMSGID = 3511 // mail --> game 添加邮件物品
	SMSGID_S_Ml_SendMail             SMSGID = 3512 // server --> mail 服务器发送邮件
	SMSGID_G_Mg_SetDefenceTeamForPvp SMSGID = 3513 // game --> manager 设置防守数据
	SMSGID_Mg_G_PvpInformation       SMSGID = 3514 // manager --> game pvp数据
	SMSGID_G_Mg_PvpScoreUpdate       SMSGID = 3515 // game --> manager 分数更新
	SMSGID_Mg_G_PvpScoreUpdate       SMSGID = 3516 // manager --> game 分数更新
	SMSGID_Server_Max                SMSGID = 8000 // 服务器协议最大值
)

// Enum value maps for SMSGID.
var (
	SMSGID_name = map[int32]string{
		0:    "SServer_None",
		3000: "ServerStart",
		3001: "Cc_C_Handshake",
		3002: "C_Cc_Handshake",
		3003: "Cc_C_Heartbeat",
		3005: "Cc_C_ServerInfo",
		3006: "C_Cc_ServerInfo",
		3007: "Cc_C_ServerLost",
		3008: "C_Cc_ServerLost",
		3009: "Cc_C_ServerOk",
		3010: "C_Cc_ServerOk",
		3011: "C_Cc_Stop",
		3012: "Cc_C_TimePass",
		3013: "C_Cc_TimePass",
		3100: "Gt_GtA_Handshake",
		3101: "GtA_Gt_Handshake",
		3102: "Gt_GtA_Heartbeat",
		3103: "Gt_GtA_ClientClose",
		3104: "GtA_Gt_ClientDisconnect",
		3105: "GtA_Gt_ClientMessage",
		3106: "GtA_Gt_Broadcast",
		3107: "GtA_Gt_SetServerID",
		3500: "L_G_Login",
		3501: "Mg_L_GMCommand",
		3502: "L_G_GMCommand",
		3503: "S_Mg_GMCommandResult",
		3504: "G_Mg_CheckNickname",
		3505: "Mg_G_CheckNickname",
		3506: "G_Mg_NicknameUpdate",
		3507: "G_Mg_NewActor",
		3508: "G_S_ActorLogin",
		3509: "G_S_ActorRelease",
		3510: "Ml_G_ActorMailData",
		3511: "Ml_G_AddItem",
		3512: "S_Ml_SendMail",
		3513: "G_Mg_SetDefenceTeamForPvp",
		3514: "Mg_G_PvpInformation",
		3515: "G_Mg_PvpScoreUpdate",
		3516: "Mg_G_PvpScoreUpdate",
		8000: "Server_Max",
	}
	SMSGID_value = map[string]int32{
		"SServer_None":              0,
		"ServerStart":               3000,
		"Cc_C_Handshake":            3001,
		"C_Cc_Handshake":            3002,
		"Cc_C_Heartbeat":            3003,
		"Cc_C_ServerInfo":           3005,
		"C_Cc_ServerInfo":           3006,
		"Cc_C_ServerLost":           3007,
		"C_Cc_ServerLost":           3008,
		"Cc_C_ServerOk":             3009,
		"C_Cc_ServerOk":             3010,
		"C_Cc_Stop":                 3011,
		"Cc_C_TimePass":             3012,
		"C_Cc_TimePass":             3013,
		"Gt_GtA_Handshake":          3100,
		"GtA_Gt_Handshake":          3101,
		"Gt_GtA_Heartbeat":          3102,
		"Gt_GtA_ClientClose":        3103,
		"GtA_Gt_ClientDisconnect":   3104,
		"GtA_Gt_ClientMessage":      3105,
		"GtA_Gt_Broadcast":          3106,
		"GtA_Gt_SetServerID":        3107,
		"L_G_Login":                 3500,
		"Mg_L_GMCommand":            3501,
		"L_G_GMCommand":             3502,
		"S_Mg_GMCommandResult":      3503,
		"G_Mg_CheckNickname":        3504,
		"Mg_G_CheckNickname":        3505,
		"G_Mg_NicknameUpdate":       3506,
		"G_Mg_NewActor":             3507,
		"G_S_ActorLogin":            3508,
		"G_S_ActorRelease":          3509,
		"Ml_G_ActorMailData":        3510,
		"Ml_G_AddItem":              3511,
		"S_Ml_SendMail":             3512,
		"G_Mg_SetDefenceTeamForPvp": 3513,
		"Mg_G_PvpInformation":       3514,
		"G_Mg_PvpScoreUpdate":       3515,
		"Mg_G_PvpScoreUpdate":       3516,
		"Server_Max":                8000,
	}
)

func (x SMSGID) Enum() *SMSGID {
	p := new(SMSGID)
	*p = x
	return p
}

func (x SMSGID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SMSGID) Descriptor() protoreflect.EnumDescriptor {
	return file_server_s_message_id_proto_enumTypes[0].Descriptor()
}

func (SMSGID) Type() protoreflect.EnumType {
	return &file_server_s_message_id_proto_enumTypes[0]
}

func (x SMSGID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SMSGID.Descriptor instead.
func (SMSGID) EnumDescriptor() ([]byte, []int) {
	return file_server_s_message_id_proto_rawDescGZIP(), []int{0}
}

var File_server_s_message_id_proto protoreflect.FileDescriptor

var file_server_s_message_id_proto_rawDesc = []byte{
	0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x4e, 0x4c, 0x44,
	0x5f, 0x4d, 0x49, 0x44, 0x2a, 0x89, 0x07, 0x0a, 0x06, 0x53, 0x4d, 0x53, 0x47, 0x49, 0x44, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x10, 0xb8, 0x17, 0x12, 0x13, 0x0a, 0x0e, 0x43, 0x63, 0x5f, 0x43, 0x5f, 0x48, 0x61, 0x6e, 0x64,
	0x73, 0x68, 0x61, 0x6b, 0x65, 0x10, 0xb9, 0x17, 0x12, 0x13, 0x0a, 0x0e, 0x43, 0x5f, 0x43, 0x63,
	0x5f, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x10, 0xba, 0x17, 0x12, 0x13, 0x0a,
	0x0e, 0x43, 0x63, 0x5f, 0x43, 0x5f, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x10,
	0xbb, 0x17, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x63, 0x5f, 0x43, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0xbd, 0x17, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x5f, 0x43, 0x63,
	0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0xbe, 0x17, 0x12, 0x14,
	0x0a, 0x0f, 0x43, 0x63, 0x5f, 0x43, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x73,
	0x74, 0x10, 0xbf, 0x17, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x5f, 0x43, 0x63, 0x5f, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4c, 0x6f, 0x73, 0x74, 0x10, 0xc0, 0x17, 0x12, 0x12, 0x0a, 0x0d, 0x43, 0x63,
	0x5f, 0x43, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x6b, 0x10, 0xc1, 0x17, 0x12, 0x12,
	0x0a, 0x0d, 0x43, 0x5f, 0x43, 0x63, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x6b, 0x10,
	0xc2, 0x17, 0x12, 0x0e, 0x0a, 0x09, 0x43, 0x5f, 0x43, 0x63, 0x5f, 0x53, 0x74, 0x6f, 0x70, 0x10,
	0xc3, 0x17, 0x12, 0x12, 0x0a, 0x0d, 0x43, 0x63, 0x5f, 0x43, 0x5f, 0x54, 0x69, 0x6d, 0x65, 0x50,
	0x61, 0x73, 0x73, 0x10, 0xc4, 0x17, 0x12, 0x12, 0x0a, 0x0d, 0x43, 0x5f, 0x43, 0x63, 0x5f, 0x54,
	0x69, 0x6d, 0x65, 0x50, 0x61, 0x73, 0x73, 0x10, 0xc5, 0x17, 0x12, 0x15, 0x0a, 0x10, 0x47, 0x74,
	0x5f, 0x47, 0x74, 0x41, 0x5f, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x10, 0x9c,
	0x18, 0x12, 0x15, 0x0a, 0x10, 0x47, 0x74, 0x41, 0x5f, 0x47, 0x74, 0x5f, 0x48, 0x61, 0x6e, 0x64,
	0x73, 0x68, 0x61, 0x6b, 0x65, 0x10, 0x9d, 0x18, 0x12, 0x15, 0x0a, 0x10, 0x47, 0x74, 0x5f, 0x47,
	0x74, 0x41, 0x5f, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x10, 0x9e, 0x18, 0x12,
	0x17, 0x0a, 0x12, 0x47, 0x74, 0x5f, 0x47, 0x74, 0x41, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x10, 0x9f, 0x18, 0x12, 0x1c, 0x0a, 0x17, 0x47, 0x74, 0x41, 0x5f,
	0x47, 0x74, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x10, 0xa0, 0x18, 0x12, 0x19, 0x0a, 0x14, 0x47, 0x74, 0x41, 0x5f, 0x47, 0x74,
	0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0xa1,
	0x18, 0x12, 0x15, 0x0a, 0x10, 0x47, 0x74, 0x41, 0x5f, 0x47, 0x74, 0x5f, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x10, 0xa2, 0x18, 0x12, 0x17, 0x0a, 0x12, 0x47, 0x74, 0x41, 0x5f,
	0x47, 0x74, 0x5f, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x10, 0xa3,
	0x18, 0x12, 0x0e, 0x0a, 0x09, 0x4c, 0x5f, 0x47, 0x5f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x10, 0xac,
	0x1b, 0x12, 0x13, 0x0a, 0x0e, 0x4d, 0x67, 0x5f, 0x4c, 0x5f, 0x47, 0x4d, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x10, 0xad, 0x1b, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x5f, 0x47, 0x5f, 0x47, 0x4d,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x10, 0xae, 0x1b, 0x12, 0x19, 0x0a, 0x14, 0x53, 0x5f,
	0x4d, 0x67, 0x5f, 0x47, 0x4d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x10, 0xaf, 0x1b, 0x12, 0x17, 0x0a, 0x12, 0x47, 0x5f, 0x4d, 0x67, 0x5f, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x10, 0xb0, 0x1b, 0x12, 0x17,
	0x0a, 0x12, 0x4d, 0x67, 0x5f, 0x47, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x10, 0xb1, 0x1b, 0x12, 0x18, 0x0a, 0x13, 0x47, 0x5f, 0x4d, 0x67, 0x5f,
	0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0xb2,
	0x1b, 0x12, 0x12, 0x0a, 0x0d, 0x47, 0x5f, 0x4d, 0x67, 0x5f, 0x4e, 0x65, 0x77, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x10, 0xb3, 0x1b, 0x12, 0x13, 0x0a, 0x0e, 0x47, 0x5f, 0x53, 0x5f, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x10, 0xb4, 0x1b, 0x12, 0x15, 0x0a, 0x10, 0x47, 0x5f,
	0x53, 0x5f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x10, 0xb5,
	0x1b, 0x12, 0x17, 0x0a, 0x12, 0x4d, 0x6c, 0x5f, 0x47, 0x5f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x4d,
	0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x10, 0xb6, 0x1b, 0x12, 0x11, 0x0a, 0x0c, 0x4d, 0x6c,
	0x5f, 0x47, 0x5f, 0x41, 0x64, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x10, 0xb7, 0x1b, 0x12, 0x12, 0x0a,
	0x0d, 0x53, 0x5f, 0x4d, 0x6c, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x10, 0xb8,
	0x1b, 0x12, 0x1e, 0x0a, 0x19, 0x47, 0x5f, 0x4d, 0x67, 0x5f, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66,
	0x65, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x46, 0x6f, 0x72, 0x50, 0x76, 0x70, 0x10, 0xb9,
	0x1b, 0x12, 0x18, 0x0a, 0x13, 0x4d, 0x67, 0x5f, 0x47, 0x5f, 0x50, 0x76, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xba, 0x1b, 0x12, 0x18, 0x0a, 0x13, 0x47,
	0x5f, 0x4d, 0x67, 0x5f, 0x50, 0x76, 0x70, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x10, 0xbb, 0x1b, 0x12, 0x18, 0x0a, 0x13, 0x4d, 0x67, 0x5f, 0x47, 0x5f, 0x50, 0x76,
	0x70, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0xbc, 0x1b, 0x12,
	0x0f, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x4d, 0x61, 0x78, 0x10, 0xc0, 0x3e,
	0x42, 0x0b, 0x5a, 0x09, 0x70, 0x62, 0x2f, 0x78, 0x73, 0x66, 0x5f, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_server_s_message_id_proto_rawDescOnce sync.Once
	file_server_s_message_id_proto_rawDescData = file_server_s_message_id_proto_rawDesc
)

func file_server_s_message_id_proto_rawDescGZIP() []byte {
	file_server_s_message_id_proto_rawDescOnce.Do(func() {
		file_server_s_message_id_proto_rawDescData = protoimpl.X.CompressGZIP(file_server_s_message_id_proto_rawDescData)
	})
	return file_server_s_message_id_proto_rawDescData
}

var file_server_s_message_id_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_server_s_message_id_proto_goTypes = []interface{}{
	(SMSGID)(0), // 0: NLD_MID.SMSGID
}
var file_server_s_message_id_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_server_s_message_id_proto_init() }
func file_server_s_message_id_proto_init() {
	if File_server_s_message_id_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_server_s_message_id_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_server_s_message_id_proto_goTypes,
		DependencyIndexes: file_server_s_message_id_proto_depIdxs,
		EnumInfos:         file_server_s_message_id_proto_enumTypes,
	}.Build()
	File_server_s_message_id_proto = out.File
	file_server_s_message_id_proto_rawDesc = nil
	file_server_s_message_id_proto_goTypes = nil
	file_server_s_message_id_proto_depIdxs = nil
}
